generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(50)
  surname        String    @db.VarChar(50)
  email          String    @unique @db.VarChar(320)
  password       String
  phone          String?
  money          Int       @default(2000)
  is_admin       Boolean   @default(false)
  is_verified    Boolean   @default(false)
  token          Token[]
  posts          Post[]    @relation("user")
  confirmedPosts Post[]    @relation("confirmer")
  messages_from  Message[] @relation("from")
  messages_to    Message[] @relation("to")
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt
}

model Token {
  id      Int    @id @default(autoincrement())
  user_id Int
  user    User   @relation(fields: [user_id], references: [id])
  token   String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt
}

model Post {
  id           Int        @id @default(autoincrement())
  user_id      Int
  user         User       @relation("user", fields: [user_id], references: [id])
  confirmer_id Int?
  confirmer    User?      @relation("confirmer", fields: [confirmer_id], references: [id])
  category_id  Int
  category     Category   @relation(fields: [category_id], references: [id])
  name         String     @db.VarChar(50)
  description  String     @db.Text
  images       Image[]
  questions    Question[]
  address      String?
  type         Type       @default(LOST)
  trusted      Boolean    @default(false)
  completed    Boolean    @default(false)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  posts      Post[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Question {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  answers    Answer[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Answer {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  question_id Int
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  status      Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

}

model Image {
  id         Int      @id @default(autoincrement())
  src        String   @db.Text
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  from_id    Int
  from       User     @relation("from", fields: [from_id], references: [id])
  to_id      Int
  to         User     @relation("to", fields: [to_id], references: [id])
  text       String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String @db.Text
}

enum Type {
  LOST
  FIND
}
